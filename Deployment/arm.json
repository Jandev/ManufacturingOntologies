{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "ResourcesName": {
      "type": "string",
      "defaultValue": "ontologies",
      "minLength": 2,
      "metadata": {
        "description": "Name of resources to be deployed."
      }
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine and UA Cloud Twin."
      }
    },
    "adminPassword": {
      "type": "secureString",
      "minLength": 12,
      "metadata": {
        "description": "Password for the Virtual Machine and UA Cloud Twin."
      }
    }
  },
  "variables": {
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "dataOwnerRoleDefinitionId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', variables('azureRbacAzureDigitalTwinsDataOwner'))]",
    "authRuleResourceId": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', concat(parameters('ResourcesName'), '-EventHubs'), 'RootManageSharedAccessKey')]",
    "azureRbacContributor": "b24988ac-6180-42a0-ab88-20f7382dd24c",
    "azureRbacAzureEventHubsDataOwner": "f526a384-b230-433a-b45c-95f59c4a2dec",
    "azureRbacAzureDigitalTwinsDataOwner": "bcd981a7-7f74-457b-83e1-cceb9e632ffe",
    "adxClusterName": "[concat(parameters('ResourcesName'), 'ADX')]",
    "adxDBName": "[concat(parameters('ResourcesName'), '-DB')]",
    "adtDataHistoryTableName": "[concat(parameters('ResourcesName'), '-adt-table')]",
    "eventHubsNamespaceName": "[concat(parameters('ResourcesName'), '-EventHubs')]"
  },
  "resources": [
    {
      "type": "Microsoft.DigitalTwins/digitalTwinsInstances",
      "apiVersion": "2020-12-01",
      "name": "[concat(parameters('ResourcesName'), '-ADT')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "privateEndpointConnections": [],
        "publicNetworkAccess": "Enabled"
      },
      "identity": {
        "type": "SystemAssigned"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[concat(parameters('ResourcesName'), '-AppService')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "P2v2",
        "tier": "PremiumV2",
        "size": "P2v2",
        "family": "Pv2",
        "capacity": 1
      },
      "kind": "linux",
      "properties": {
        "perSiteScaling": false,
        "elasticScaleEnabled": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": true,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0,
        "zoneRedundant": false
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[concat(parameters('ResourcesName'), '-WebApp')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', concat(parameters('ResourcesName'), '-AppService'))]",
        "siteConfig": {
          "numberOfWorkers": 1,
          "linuxFxVersion": "DOCKER|ghcr.io/digitaltwinconsortium/ua-cloudtwin:main",
          "minTlsVersion": "1.2",
          "ftpsState": "FtpsOnly",
          "acrUseManagedIdentityCreds": false,
          "alwaysOn": true,
          "http20Enabled": false,
          "functionAppScaleLimit": 0,
          "minimumElasticInstanceCount": 0
        }
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('ResourcesName'), '-Identity'))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', concat(parameters('ResourcesName'), '-AppService'))]",
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('ResourcesName'), '-EventHubs'))]",
        "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT'))]",
        "[resourceId('Microsoft.Kusto/clusters/databases', variables('adxClusterName'), variables('adxDBName'))]"
      ],
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "location": "[resourceGroup().location]",
          "name": "appsettings",
          "properties": {
            "ADMIN_PASSWORD": "[parameters('adminPassword')]",
            "ADMIN_USERNAME": "[parameters('adminUsername')]",
            "ADT_HOSTNAME": "[concat('https://', reference(concat(parameters('ResourcesName'), '-ADT')).hostName)]",
            "AZURE_CLIENT_ID": "[reference(concat(parameters('ResourcesName'), '-Identity')).clientId]",
            "AZURE_TENANT_ID": "[subscription().tenantId]",
            "BROKER_NAME": "[concat(parameters('ResourcesName'), '-EventHubs.servicebus.windows.net')]",
            "BROKER_PASSWORD": "[listkeys(variables('authRuleResourceId'), '2015-08-01').primaryConnectionString]",
            "BROKER_PORT": "9093",
            "BROKER_USERNAME": "$ConnectionString",
            "CLIENT_NAME": "uacloudtwin",
            "METADATA_TOPIC": "metadata",
            "TOPIC": "data"
          },
          "type": "config",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', concat(parameters('ResourcesName'), '-WebApp'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[concat(parameters('ResourcesName'), '-AAS-Repo')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "httpsOnly": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', concat(parameters('ResourcesName'), '-AppService'))]",
        "siteConfig": {
          "numberOfWorkers": 1,
          "linuxFxVersion": "DOCKER|ghcr.io/digitaltwinconsortium/aas-repository:masterv3",
          "minTlsVersion": "1.2",
          "ftpsState": "FtpsOnly",
          "acrUseManagedIdentityCreds": false,
          "alwaysOn": true,
          "http20Enabled": false,
          "functionAppScaleLimit": 0,
          "minimumElasticInstanceCount": 0
        }
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('ResourcesName'), '-Identity'))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', concat(parameters('ResourcesName'), '-AppService'))]"
      ],
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "location": "[resourceGroup().location]",
          "name": "appsettings",
          "properties": {
            "ADX_HOST": "[reference(resourceId('Microsoft.Kusto/clusters', variables('adxClusterName')), '2022-02-01').uri]",
            "ADX_DB": "[variables('adxDBName')]",
            "AAD_APPLICATION_ID": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('ResourcesName'), '-Identity')), '2022-05-31').identity.clientId]",
            "CALCULATE_PCF": "1",
            "ADT_HOSTNAME": "[concat('https://', reference(concat(parameters('ResourcesName'), '-ADT')).hostName)]",
            "WATTTIME_USER": "",
            "WATTTIME_PASSWORD": "",
            "USE_JSON_SERIALIZATION": "1"
          },
          "type": "config",
          "dependsOn": [
            "[concat('Microsoft.Web/sites/', concat(parameters('ResourcesName'), '-AAS-Repo'))]"
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-04-01",
      "name": "[concat(parameters('ResourcesName'), 'storage')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage"
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2020-11-01",
      "name": "[concat(parameters('ResourcesName'), '-IPAddress')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Basic"
      },
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(parameters('ResourcesName'), 'domain')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2020-11-01",
      "name": "[concat(parameters('ResourcesName'), '-NSG')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "default-allow-3389",
            "properties": {
              "priority": 1000,
              "access": "Allow",
              "direction": "Inbound",
              "destinationPortRange": "3389",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2020-11-01",
      "name": "[concat(parameters('ResourcesName'), '-Network')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[concat(parameters('ResourcesName'), '-Subnet')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]",
              "networkSecurityGroup": {
                "id": "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('ResourcesName'), '-NSG'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', concat(parameters('ResourcesName'), '-NSG'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2020-11-01",
      "name": "[concat(parameters('ResourcesName'), '-IF')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('ResourcesName'), '-IPAddress'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', concat(parameters('ResourcesName'), '-Network'), concat(parameters('ResourcesName'), '-Subnet'))]"
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', concat(parameters('ResourcesName'), '-IPAddress'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', concat(parameters('ResourcesName'), '-Network'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2021-03-01",
      "name": "[concat(parameters('ResourcesName'), '-VM')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D4s_v3"
        },
        "osProfile": {
          "computerName": "[parameters('ResourcesName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsDesktop",
            "offer": "Windows-10",
            "sku": "20h2-pro-g2",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "Premium_LRS"
            },
            "deleteOption": "Delete",
            "diskSizeGB": 127
          },
          "dataDisks": []
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('ResourcesName'), '-IF'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": true,
            "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts', concat(parameters('ResourcesName'), 'storage'))).primaryEndpoints.blob]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', concat(parameters('ResourcesName'), '-IF'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', concat(parameters('ResourcesName'), 'storage'))]"
      ]
    },
    {
      "type": "Microsoft.Kusto/clusters",
      "apiVersion": "2021-01-01",
      "name": "[variables('adxClusterName')]",
      "sku": {
        "name": "Standard_D11_v2",
        "tier": "Standard",
        "capacity": 2
      },
      "location": "[resourceGroup().location]",
      "tags": {
        "Created By": "GitHub quickstart template"
      },
      "properties": {
        "trustedExternalTenants": [
          {
            "value": "*"
          }
        ],
        "enableDiskEncryption": false,
        "enableStreamingIngest": true,
        "enablePurge": false,
        "enableDoubleEncryption": false,
        "engineType": "V3"
      }
    },
    {
      "type": "Microsoft.Kusto/clusters/databases",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}/{1}', variables('adxClusterName'), variables('adxDBName'))]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters', variables('adxClusterName'))]"
      ],
      "properties": {
        "softDeletePeriodInDays": 365,
        "hotCachePeriodInDays": 31
      },
      "kind": "ReadWrite"
    },
    {
      "type": "Microsoft.EventHub/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[variables('eventHubsNamespaceName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard",
        "tier": "Standard",
        "capacity": 1
      },
      "properties": {
        "isAutoInflateEnabled": true,
        "maximumThroughputUnits": 16
      }
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('ResourcesName'), '-EventHubs', '/adthistory')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('ResourcesName'), '-EventHubs'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('ResourcesName'), '-EventHubs', '/commander.command')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('ResourcesName'), '-EventHubs'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('ResourcesName'), '-EventHubs', '/commander.response')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('ResourcesName'), '-EventHubs'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('ResourcesName'), '-EventHubs', '/data')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('ResourcesName'), '-EventHubs'))]"
      ]
    },
    {
      "type": "Microsoft.EventHub/namespaces/eventhubs",
      "apiVersion": "2021-11-01",
      "name": "[concat(parameters('ResourcesName'), '-EventHubs', '/metadata')]",
      "properties": {
        "messageRetentionInDays": 1,
        "partitionCount": 1
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', concat(parameters('ResourcesName'), '-EventHubs'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "name": "[concat(parameters('ResourcesName'), '-Identity')]",
      "apiVersion": "2018-11-30",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "name": "[guid(variables('dataOwnerRoleDefinitionId'), resourceGroup().id)]",
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('ResourcesName'), '-Identity'))]"
      ],
      "properties": {
        "roleDefinitionId": "[variables('dataOwnerRoleDefinitionId')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('ResourcesName'), '-Identity')), '2018-11-30').principalId]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.EventHub/namespaces/{0}/eventhubs/{1}', split(format('{0}/{1}', variables('eventHubsNamespaceName'), 'adthistory'), '/')[0], split(format('{0}/{1}', variables('eventHubsNamespaceName'), 'adthistory'), '/')[1])]",
      "name": "[guid(resourceId('Microsoft.EventHub/namespaces/eventhubs', split(format('{0}/{1}', variables('eventHubsNamespaceName'), 'adthistory'), '/')[0], split(format('{0}/{1}', variables('eventHubsNamespaceName'), 'adthistory'), '/')[1]), resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT')), variables('azureRbacAzureEventHubsDataOwner'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT'))]"
      ],
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT')), '2022-05-31', 'full').identity.principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureRbacAzureEventHubsDataOwner'))]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.Kusto/clusters/databases/principalAssignments",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}/{1}/{2}', variables('adxClusterName'), variables('adxDBName'), guid(resourceId('Microsoft.Kusto/clusters/databases', split(format('{0}/{1}', variables('adxClusterName'), variables('adxDBName')), '/')[0], split(format('{0}/{1}', variables('adxClusterName'), variables('adxDBName')), '/')[1]), resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT')), 'Admin'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases', variables('adxClusterName'), variables('adxDBName'))]"
      ],
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT')), '2022-05-31', 'full').identity.principalId]",
        "role": "Admin",
        "tenantId": "[reference(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT')), '2022-05-31', 'full').identity.tenantId]",
        "principalType": "App"
      }
    },
    {
      "type": "Microsoft.Kusto/clusters/databases/principalAssignments",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}/{1}/{2}', variables('adxClusterName'), variables('adxDBName'), guid(resourceId('Microsoft.Kusto/clusters/databases', split(format('{0}/{1}', variables('adxClusterName'), variables('adxDBName')), '/')[0], split(format('{0}/{1}', variables('adxClusterName'), variables('adxDBName')), '/')[1]), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('ResourcesName'), '-Identity')), 'Admin'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases', variables('adxClusterName'), variables('adxDBName'))]"
      ],
      "properties": {
        "principalId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('ResourcesName'), '-Identity')), '2022-05-31', 'full').identity.principalId]",
        "role": "Admin",
        "tenantId": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', concat(parameters('ResourcesName'), '-Identity')), '2022-05-31', 'full').identity.tenantId]",
        "principalType": "App"
      }
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2020-10-01-preview",
      "scope": "[format('Microsoft.Kusto/clusters/{0}/databases/{1}', split(format('{0}/{1}', variables('adxClusterName'), variables('adxDBName')), '/')[0], split(format('{0}/{1}', variables('adxClusterName'), variables('adxDBName')), '/')[1])]",
      "name": "[guid(resourceId('Microsoft.Kusto/clusters/databases', split(format('{0}/{1}', variables('adxClusterName'), variables('adxDBName')), '/')[0], split(format('{0}/{1}', variables('adxClusterName'), variables('adxDBName')), '/')[1]), resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT')), variables('azureRbacContributor'))]",
      "dependsOn": [
        "[resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT'))]"
      ],
      "properties": {
        "principalId": "[reference(resourceId('Microsoft.DigitalTwins/digitalTwinsInstances', concat(parameters('ResourcesName'), '-ADT')), '2022-05-31', 'full').identity.principalId]",
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', variables('azureRbacContributor'))]",
        "principalType": "ServicePrincipal"
      }
    },
    {
      "type": "Microsoft.DigitalTwins/digitalTwinsInstances/timeSeriesDatabaseConnections",
      "apiVersion": "2022-05-31",
      "name": "[format('{0}/{1}', concat(parameters('ResourcesName'), '-ADT'), variables('adtDataHistoryTableName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Kusto/clusters/databases', variables('adxClusterName'), variables('adxDBName'))]"
      ],
      "properties": {
        "connectionType": "AzureDataExplorer",
        "adxEndpointUri": "[reference(resourceId('Microsoft.Kusto/clusters', variables('adxClusterName')), '2022-02-01').uri]",
        "adxDatabaseName": "[variables('adxDBName')]",
        "eventHubEndpointUri": "[format('sb://{0}.servicebus.windows.net', variables('eventHubsNamespaceName'))]",
        "eventHubEntityPath": "adthistory",
        "adxResourceId": "[resourceId('Microsoft.Kusto/clusters', variables('adxClusterName'))]",
        "eventHubNamespaceResourceId": "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubsNamespaceName'))]"
      }
    }
  ]
}
